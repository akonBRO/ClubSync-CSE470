// recruitmentroute.js
const express = require('express');
const router = express.Router();
const Club = require('../models/club'); // Assuming path is correct
const mongoose = require('mongoose');

// 1. Turn On/Off Recruitment and Set/Clear Semesters
router.post('/set-recruitment/:clubId', async (req, res) => {
try {
    const { clubId } = req.params;
    // Expect 'semester' only when turning ON, 'recruitmentStatus' is always required
    const { semester, recruitmentStatus } = req.body;

    if (recruitmentStatus === undefined || typeof recruitmentStatus !== 'string' || !['Yes', 'No'].includes(recruitmentStatus)) {
        return res.status(400).json({ message: 'Please provide a valid recruitment status ("Yes" or "No").' });
    }

    let updateData = {};

    if (recruitmentStatus === 'Yes') {
        // When turning ON, require a semester to add
        if (!semester || typeof semester !== 'string' || semester.trim() === '') {
            return res.status(400).json({ message: 'Please provide the specific semester to start recruitment for.' });
        }
        updateData = {
            creq: 'Yes',
            $addToSet: { semester: semester.trim() } // Add semester only if it doesn't exist
        };
    } else { // recruitmentStatus === 'No'
        // When turning OFF, set status to No and clear the active semesters
        updateData = {
            creq: 'No',
            $set: { semester: [] } // Clear the semester array
        };
    }

    const club = await Club.findByIdAndUpdate(
        clubId,
        updateData,
        { new: true, runValidators: true } // new: true returns the updated document
    );

    if (!club) {
        return res.status(404).json({ message: 'Club not found.' });
    }

    // Recalculate semester data after update for the response
    const semesterData = club.semester.map(sem => {
        const semesterApplicants = club.req_id.filter(req => req.semester === sem);
        const pending = semesterApplicants.filter(app => app.status === 'pending').length;
        const accepted = semesterApplicants.filter(app => app.status === 'accepted').length;
        const rejected = semesterApplicants.filter(app => app.status === 'rejected').length;
        return {
            semester: sem,
            totalApplicants: semesterApplicants.length,
            pending: pending,
            accepted: accepted,
            rejected: rejected
        };
        });


    res.status(200).json({
        message: `Recruitment status set to ${recruitmentStatus}. ${recruitmentStatus === 'Yes' ? `Recruiting for semester: ${semester}` : 'Stopped recruiting for all semesters.'}`,
        club, // Send back the updated club document
        semesterData // Send back the recalculated semester data
    });

} catch (error) {
    console.error("Error setting recruitment status:", error);
    // Handle potential CastError if clubId format is invalid
    if (error instanceof mongoose.Error.CastError) {
            return res.status(400).json({ message: 'Invalid Club ID format.' });
    }
    res.status(500).json({ message: 'Server error while updating recruitment status.', error: error.message });
}
});

// 2. Student Applies to a Club - (No changes needed based on prompt)
router.post('/apply/:clubId', async (req, res) => {
try {
    const { clubId } = req.params;
    const { studentId, semester } = req.body; // Assuming studentId comes from auth/session later

    if (!studentId || !semester) {
        return res.status(400).json({ message: 'Student ID and semester are required.' });
    }

    if (!mongoose.Types.ObjectId.isValid(clubId)) {
            return res.status(400).json({ message: 'Invalid Club ID format.' });
    }
        // Basic validation for studentId if it's expected to be an ObjectId
        if (!mongoose.Types.ObjectId.isValid(studentId)) {
        return res.status(400).json({ message: 'Invalid Student ID format.' });
    }


    const club = await Club.findById(clubId);
    if (!club) {
        return res.status(404).json({ message: 'Club not found.' });
    }

    // Check if recruitment is active for the club overall
    if (club.creq !== 'Yes') {
            return res.status(400).json({ message: 'This club is not currently recruiting.' });
    }

    // Check if the club is recruiting for the *specific* semester
    if (!club.semester.includes(semester)) {
        return res.status(400).json({ message: `This club is not recruiting for the '${semester}' semester.` });
    }

    // Check if the student has already applied for this specific semester
    const alreadyApplied = club.req_id.some(application =>
        // Ensure comparison works even if studentId is stored as ObjectId
            application.studentId.equals(studentId) && application.semester === semester
    );

    if (alreadyApplied) {
        return res.status(400).json({ message: 'You have already applied to this club for this semester.' });
    }

    // Add the student's application
    club.req_id.push({
        studentId: studentId,
        semester: semester,
        status: 'pending' // Initial status
        // applicationDate is handled by default in schema
    });

    await club.save();
    res.status(201).json({ message: 'Application submitted successfully.', club }); // 201 Created is suitable here
} catch (error) {
    console.error("Error applying to club:", error);
        if (error instanceof mongoose.Error.CastError) {
        return res.status(400).json({ message: 'Invalid ID format provided.' });
    }
    res.status(500).json({ message: 'Server error during application.', error: error.message });
}
});

// 3. Get all applicants for a club - (Populate student details as requested)
router.get('/applicants/:clubId', async (req, res) => {
try {
    const { clubId } = req.params;

        if (!mongoose.Types.ObjectId.isValid(clubId)) {
        return res.status(400).json({ message: 'Invalid Club ID format.' });
    }

    // Adjust populate fields based on your Student schema (e.g., 'name email regno')
    const club = await Club.findById(clubId)
                            .populate({
                                path: 'req_id.studentId',
                                select: 'name studentId regno email' // Specify fields you want from Student model
                            });

    if (!club) {
        return res.status(404).json({ message: 'Club not found.' });
    }

    // Optional: Filter applicants by a specific semester if needed via query param
    const { semester } = req.query;
    let applicants = club.req_id;
    if (semester) {
        applicants = club.req_id.filter(app => app.semester === semester);
    }


    res.status(200).json({ applicants: applicants });
} catch (error) {
    console.error("Error fetching applicants:", error);
        if (error instanceof mongoose.Error.CastError) {
        return res.status(400).json({ message: 'Invalid Club ID format.' });
    }
    res.status(500).json({ message: 'Server error fetching applicants.', error: error.message });
}
});

// 4. Set Application Status (Accept/Reject) - (No changes needed based on prompt)
router.post('/set-status/:clubId', async (req, res) => {
try {
    const { clubId } = req.params;
    const { applicationId, status } = req.body; // Use the unique _id of the application subdocument

    if (!mongoose.Types.ObjectId.isValid(clubId)) {
        return res.status(400).json({ message: 'Invalid Club ID format.' });
    }
    if (!mongoose.Types.ObjectId.isValid(applicationId)) {
    return res.status(400).json({ message: 'Invalid Application ID format.' });
}

    if (!status || !['pending', 'accepted', 'rejected'].includes(status)) {
        return res.status(400).json({ message: 'A valid status (pending, accepted, rejected) is required.' });
    }

    // Find the club and the specific application subdocument using its _id
    const club = await Club.findOneAndUpdate(
        { "_id": clubId, "req_id._id": applicationId }, // Find the club and the specific application
        {
            "$set": { "req_id.$.status": status } // Update the status of the matched application
        },
        { new: true, runValidators: true } // Return the updated document
    );


    if (!club) {
        // This could mean club not found OR application ID not found within that club
        return res.status(404).json({ message: 'Club or Application not found.' });
    }

    res.status(200).json({ message: 'Application status updated successfully.', application: club.req_id.id(applicationId) }); // Return updated application details

} catch (error) {
    console.error("Error setting application status:", error);
    if (error instanceof mongoose.Error.CastError) {
        return res.status(400).json({ message: 'Invalid ID format provided.' });
    }
    res.status(500).json({ message: 'Server error while setting status.', error: error.message });
}
});


// 5. Get Club Details with Recruitment Info - (Modified slightly to ensure semesterData calculation)
router.get('/details/:clubId', async (req, res) => {
try {
    const { clubId } = req.params;

    if (!mongoose.Types.ObjectId.isValid(clubId)) {
        return res.status(400).json({ message: 'Invalid Club ID format.' });
    }

    const club = await Club.findById(clubId);

    if (!club) {
        return res.status(404).json({ message: 'Club not found.' });
    }

    // Calculate applicant counts for each *currently active* recruitment semester
    const semesterData = club.semester.map(sem => {
        const semesterApplicants = club.req_id.filter(req => req.semester === sem);
        const pending = semesterApplicants.filter(app => app.status === 'pending').length;
        const accepted = semesterApplicants.filter(app => app.status === 'accepted').length;
        const rejected = semesterApplicants.filter(app => app.status === 'rejected').length;
        return {
            semester: sem,
            totalApplicants: semesterApplicants.length,
            pending: pending,
            accepted: accepted,
            rejected: rejected
        };
        });


    res.status(200).json({
        // Send only necessary club info if preferred, or the whole object
        club: {
            _id: club._id,
            cname: club.cname,
            cid: club.cid,
            creq: club.creq,
            // Add other fields needed on this page
        },
        activeSemesters: club.semester, // Send the array of currently active semesters
        semesterData: semesterData,   // Send the calculated stats
    });
} catch (error) {
    console.error("Error fetching club details:", error);
    if (error instanceof mongoose.Error.CastError) {
        return res.status(400).json({ message: 'Invalid Club ID format.' });
    }
    res.status(500).json({ message: 'Server error fetching club details', error: error.message });
}
});


module.exports = router;